from jsonschema import Draft4Validator

from rest_framework.exceptions import ValidationError


class SettingsSchemaValidator(object):
    """Settings must pass schema validaiton for the object."""

    def __init__(self, model, schema):
        self.model = model
        self.schema = schema

    def __call__(self, kwargs):
        settings = kwargs.get('settings', None)
        if settings:
            self._evaluate_schema(settings)

    def _evaluate_schema(self, settings):
        errors = {}
        v = Draft4Validator(self.schema)

        # errors generated by `properties` definition
        for e in v.iter_errors(settings):
            try:
                k = e.relative_path.pop()
            except IndexError:
                pass
            else:
                errors[k] = e.message

        # errors from `required`
        for key in self.schema.get('required'):
            if key not in settings.keys():
                msg = ["'{}' is a required property".format(key)]
                try:
                    errors[key].append(msg)
                except KeyError:
                    errors[key] = msg

        if errors:
            raise ValidationError(errors)
