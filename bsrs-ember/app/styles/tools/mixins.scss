// Placeholders object that basically is a true false indicator for the if statement
$Placeholders: ();

@mixin vertical-align($extend: true) {
  $vertical-align:map-get($Placeholders, 'vertical-align');
  // prevent extending itself.  Will extend placeholder on every call
  @if $extend == true {
    // first call to mixin will generate key value in $Placeholder object and create placeholder at root of app with styles in @else
    @if $vertical-align == null {
      $vertical-align: unique-id();
      $Placeholder: map-merge($Placeholders, ('vertical-align': $vertical-align)) !global;
      @at-root %#{$vertical-align} {
        // recursive mixin that places itself at root of app inside of placeholder with css below
        @include vertical-align(false);
      }
    }
    @extend %#{$vertical-align};
  } @else {
    position: relative;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
  }
}

@mixin truncate($extend: true) {
  $truncate: map-get($Placeholders, 'truncate');
  // prevent extending itself.  Will extend placeholder on every call
  @if $extend == true {
    // first call to mixin will generate key value in $Placeholder object and create placeholder at root of app with styles in @else
    @if $truncate == null {
      $truncate: unique-id();
      $Placeholder: map-merge($Placeholders, ('truncate': $truncate)) !global;
      @at-root %#{$truncate} {
        // recursive mixin that places itself at root of app inside of placeholder with css below
        @include truncate(false);
      }
    }
    @extend %#{$truncate};
  } @else {
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
  }
}

@mixin input-group-dropdown($min-width: 6em) {
  min-width: $min-width;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  margin-left: -1px;
  margin-right: -1px;
}

@mixin nav-box-shadow($blurRadius: 10px, $color: $dark) {
  -webkit-box-shadow: 0 0 $blurRadius $color;
  -moz-box-shadow: 0 0 $blurRadius $color;
  box-shadow: 0 0 $blurRadius $color;
}

/*
* Used for general desktop and mobile
*/
@mixin headerColors($extend: true) {
  $headerColors:map-get($Placeholders, 'headerColors');
  // prevent extending itself.  Will extend placeholder on every call
  @if $extend == true {
    // first call to mixin will generate key value in $Placeholder object and create placeholder at root of app with styles in @else
    @if $headerColors == null {
      $headerColors: unique-id();
      $Placeholder: map-merge($Placeholders, ('headerColors': $headerColors)) !global;
      @at-root %#{$headerColors} {
        // recursive mixin that places itself at root of app inside of placeholder with css below
        @include headerColors(false);
      }
    }
    @extend %#{$headerColors};
  } @else {
    background: $menuColor;
    color: $light;
  }
}

/*
* Used to include font-awesome icons using CSS
*/
@mixin font-awesome($content: "", $width: 1em, $height: 1em) {
  content: $content;
  width: $width;
  height: $height;
  text-align: center;
  font-family: FontAwesome;
  font-style: normal;
  font-weight: normal;
}

@mixin mobileSearchInput($height: $mobileHeaderHeight - 20px, $width: 100%, $margin: 0) {
  height: $height;
  border: none;
  background: $darker;
  width: $width;
  font-size: 1.6rem;
  color: $gray;
  padding: 0 10px;
  margin: $margin;
  border-radius: $borderRadius;
  &::-webkit-input-placeholder { /* Chrome/Opera/Safari */
    color: $medGray;
  }
  &::-moz-placeholder { /* Firefox 19+ */
    color: $medGray;
  }
  &:-ms-input-placeholder { /* IE 10+ */
    color: $medGray;
  }
  &:-moz-placeholder { /* Firefox 18- */
    color: $medGray;
  }
}

@mixin smoothScrolling($extend: true) {
  $smoothScrolling:map-get($Placeholders, 'smoothScrolling');
  // prevent extending itself.  Will extend placeholder on every call
  @if $extend == true {
    // first call to mixin will generate key value in $Placeholder object and create placeholder at root of app with styles in @else
    @if $smoothScrolling == null {
      $smoothScrolling: unique-id();
      $Placeholder: map-merge($Placeholders, ('smoothScrolling': $smoothScrolling)) !global;
      @at-root %#{$smoothScrolling} {
        // recursive mixin that places itself at root of app inside of placeholder with css below
        @include smoothScrolling(false);
      }
    }
    @extend %#{$smoothScrolling};
  } @else {
    -webkit-overflow-scrolling: touch; // DO NOT REMOVE
    overflow: scroll;
  }
}

@mixin fullScreen($extend: true) {
  $fullScreen:map-get($Placeholders, 'fullScreen');
  // prevent extending itself.  Will extend placeholder on every call
  @if $extend == true {
    // first call to mixin will generate key value in $Placeholder object and create placeholder at root of app with styles in @else
    @if $fullScreen == null {
      $fullScreen: unique-id();
      $Placeholder: map-merge($Placeholders, ('fullScreen': $fullScreen)) !global;
      @at-root %#{$fullScreen} {
        // recursive mixin that places itself at root of app inside of placeholder with css below
        @include fullScreen(false);
      }
    }
    @extend %#{$fullScreen};
  } @else {
    position: fixed;
    width: 100%;
    height: 100%;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 40;
    background: $light;
    @include nav-box-shadow(25px);
  }
}

@mixin borderStyle($borderWidth: 1px) {
  border: $borderStyle;
  border-width: $borderWidth;
}

@mixin generalPadding($extend: true) {
  $generalPadding:map-get($Placeholders, 'generalPadding');
  // prevent extending itself.  Will extend placeholder on every call
  @if $extend == true {
    // first call to mixin will generate key value in $Placeholder object and create placeholder at root of app with styles in @else
    @if $generalPadding == null {
      $generalPadding: unique-id();
      $Placeholder: map-merge($Placeholders, ('generalPadding': $generalPadding)) !global;
      @at-root %#{$generalPadding} {
        // recursive mixin that places itself at root of app inside of placeholder with css below
        @include generalPadding(false);
      }
    }
    @extend %#{$generalPadding};
  } @else {
    padding: 4%;
  }
}

@mixin pageTitle($extend: true) {
  $pageTitle:map-get($Placeholders, 'pageTitle');
  // prevent extending itself.  Will extend placeholder on every call
  @if $extend == true {
    // first call to mixin will generate key value in $Placeholder object and create placeholder at root of app with styles in @else
    @if $pageTitle == null {
      $pageTitle: unique-id();
      $Placeholder: map-merge($Placeholders, ('pageTitle': $pageTitle)) !global;
      @at-root %#{$pageTitle} {
        // recursive mixin that places itself at root of app inside of placeholder with css below
        @include pageTitle(false);
      }
    }
    @extend %#{$pageTitle};
  } @else {
    padding: 0 15px;
    height: $mobileDocHeaderHeight;
    line-height: $mobileDocHeaderHeight;
    font-size: 2rem;
    color: $darkGray;
    margin: 0;
    @include truncate;
  }
}
