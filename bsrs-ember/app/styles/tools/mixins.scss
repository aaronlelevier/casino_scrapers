// Placeholders object that basically is a true false indicator for the if statement
$Placeholders: ();

@mixin vertical-align() {
  position: relative;
  top: 50%;
  transform: translateY(-50%);
}

@mixin truncate() {
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}


@mixin nav-box-shadow($blurRadius: 10px, $color: $dark) {
  box-shadow: 0 0 $blurRadius $color;
}

/*
* Used for general desktop and mobile
*/
@mixin headerColors() {
  background: $menuColor;
  color: $light;
}

/*
* Used to include font-awesome icons using CSS
*/
@mixin font-awesome($content: "", $width: 1em, $height: 1em) {
  content: $content;
  width: $width;
  height: $height;
  text-align: center;
  font-family: FontAwesome;
  font-style: normal;
  font-weight: normal;
}

@mixin mobileSearchInput($height: $mobileHeaderHeight - 20px, $width: 100%, $margin: 0) {
  height: $height;
  border: none;
  background: $darker;
  width: $width;
  font-size: 1.6rem;
  color: $gray;
  padding: 0 10px;
  margin: $margin;
  border-radius: $borderRadius;
  &::-webkit-input-placeholder { /* Chrome/Opera/Safari */
    color: $medGray;
  }
  &::-moz-placeholder { /* Firefox 19+ */
    color: $medGray;
  }
  &:-ms-input-placeholder { /* IE 10+ */
    color: $medGray;
  }
  &:-moz-placeholder { /* Firefox 18- */
    color: $medGray;
  }
}

@mixin smoothScrolling() {
  -webkit-overflow-scrolling: touch; // DO NOT REMOVE
  overflow: scroll;
}

@mixin fullScreen() {
  position: fixed;
  width: 100%;
  height: 100%;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 40;
  @include nav-box-shadow(25px);
}

@mixin borderStyle($borderWidth: 1px) {
  border: $borderStyle;
  border-width: $borderWidth;
}

@mixin generalPadding() {
  padding: 4%;
}

@mixin pageTitle() {
  padding: 0 15px;
  height: $mobileDocHeaderHeight;
  line-height: $mobileDocHeaderHeight;
  font-size: 2rem;
  color: $darkGray;
  margin: 0;
  @include truncate;
}

// @mixin input-group-dropdown-static($extend: true) {
//   $inputGroupDropdownStatic:map-get($Placeholders, 'inputGroupDropdownStatic');
//   // prevent extending itself.  Will extend placeholder on every call
//   @if $extend == true {
//     // first call to mixin will generate key value in $Placeholder object and create placeholder at root of app with styles in @else
//     @if $inputGroupDropdownStatic == null {
//       $inputGroupDropdownStatic: unique-id();
//       $Placeholder: map-merge($Placeholders, ('inputGroupDropdownStatic': $inputGroupDropdownStatic)) !global;
//       @at-root %#{$inputGroupDropdownStatic} {
//         // recursive mixin that places itself at root of app inside of placeholder with css below
//         @include input-group-dropdown-static(false);
//       }
//     }
//     @extend %#{$inputGroupDropdownStatic};
//   } @else {
//     appearance: none;
//     margin-left: -1px;
//     margin-right: -1px;
//   }
// }

%input-group-dropdown-static {
  appearance: none;
  margin-left: -1px;
  margin-right: -1px;
}

@mixin input-group-dropdown($min-width: 6em) {
  min-width: $min-width;
  @extend %input-group-dropdown-static;
}
